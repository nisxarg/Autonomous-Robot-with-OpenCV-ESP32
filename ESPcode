/***************************************************************
 * Generic ESP32 + L298N + 2 DC Motors Code
 *
 * Connection summary:
 *   Motor A: ENA -> 14, IN1 -> 27, IN2 -> 26
 *   Motor B: ENB -> 32, IN3 -> 25, IN4 -> 33
 *
 * URL endpoints (examples):
 *   /motorA?dir=forward&speed=128
 *   /motorA?dir=stop
 *   /motorB?dir=backward&speed=200
 *
 ***************************************************************/

#include <WiFi.h>
#include <WebServer.h>

const char* ssid     = "TMOBILE-3EEC";
const char* password = "fk5t6xd28vr";

// Motor control pins
const int enA = 14;  // Enable pin for motor A (PWM)
const int in1 = 27;  // Motor A forward pin
const int in2 = 26;  // Motor A backward pin
const int enB = 32;  // Enable pin for motor B (PWM)
const int in3 = 25;  // Motor B forward pin
const int in4 = 33;  // Motor B backward pin

WebServer server(80);

// Helper function: Set Motor A direction and speed
void setMotorA(int speed, bool forward) {
  speed = constrain(speed, 0, 255);
  digitalWrite(in1, forward ? HIGH : LOW);
  digitalWrite(in2, forward ? LOW  : HIGH);
  ledcWrite(0, speed);
}

// Helper function: Set Motor B direction and speed
void setMotorB(int speed, bool forward) {
  speed = constrain(speed, 0, 255);
  digitalWrite(in3, forward ? HIGH : LOW);
  digitalWrite(in4, forward ? LOW  : HIGH);
  ledcWrite(1, speed);
}

// Root handler: Basic usage info
void handleRoot() {
  String message = "<html><head><title>ESP32 Motor Control</title></head><body>";
  message += "<h1>ESP32 Motor Control</h1>";
  message += "<p>Use these endpoints for control:</p>";
  message += "<ul>";
  message += "<li>/motorA?dir=forward&speed=128</li>";
  message += "<li>/motorA?dir=backward&speed=200</li>";
  message += "<li>/motorA?dir=stop</li>";
  message += "<li>/motorB?dir=forward&speed=100</li>";
  message += "<li>/motorB?dir=backward&speed=255</li>";
  message += "<li>/motorB?dir=stop</li>";
  message += "</ul>";
  message += "</body></html>";
  
  server.send(200, "text/html", message);
}

// Handler for motor A
void handleMotorA() {
  String dir   = server.hasArg("dir")   ? server.arg("dir")   : "";
  String sStr  = server.hasArg("speed") ? server.arg("speed") : "0";
  int speed    = sStr.toInt();

  if (dir.equalsIgnoreCase("stop")) {
    setMotorA(0, true);  // Stop by setting speed=0
    server.send(200, "text/plain", "Motor A stopped");
  }
  else if (dir.equalsIgnoreCase("forward")) {
    setMotorA(speed, true);
    server.send(200, "text/plain", "Motor A moving forward at speed " + String(speed));
  }
  else if (dir.equalsIgnoreCase("backward")) {
    setMotorA(speed, false);
    server.send(200, "text/plain", "Motor A moving backward at speed " + String(speed));
  }
  else {
    server.send(400, "text/plain", "Invalid request. Use ?dir=forward/backward/stop&speed=0-255");
  }
}

// Handler for motor B
void handleMotorB() {
  String dir   = server.hasArg("dir")   ? server.arg("dir")   : "";
  String sStr  = server.hasArg("speed") ? server.arg("speed") : "0";
  int speed    = sStr.toInt();

  if (dir.equalsIgnoreCase("stop")) {
    setMotorB(0, true);  // Stop by setting speed=0
    server.send(200, "text/plain", "Motor B stopped");
  }
  else if (dir.equalsIgnoreCase("forward")) {
    setMotorB(speed, true);
    server.send(200, "text/plain", "Motor B moving forward at speed " + String(speed));
  }
  else if (dir.equalsIgnoreCase("backward")) {
    setMotorB(speed, false);
    server.send(200, "text/plain", "Motor B moving backward at speed " + String(speed));
  }
  else {
    server.send(400, "text/plain", "Invalid request. Use ?dir=forward/backward/stop&speed=0-255");
  }
}

void setup() {
  Serial.begin(115200);

  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  // Setup two PWM channels for motors
  ledcSetup(0, 1000, 8);  // Channel 0, 1 kHz, 8-bit
  ledcSetup(1, 1000, 8);  // Channel 1, 1 kHz, 8-bit

  // Attach pins to channels
  ledcAttachPin(enA, 0);
  ledcAttachPin(enB, 1);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to ");
  Serial.println(ssid);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected.");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Setup server routes
  server.on("/", handleRoot);
  server.on("/motorA", handleMotorA);
  server.on("/motorB", handleMotorB);

  // Start HTTP server
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
}
